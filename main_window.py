from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QMainWindow, QMessageBox, QTabWidget
from serial_605 import serial_605

from tabs.details_tab import DetailsTab
from tabs.scan_tab import ScanTab
from tabs.build_tab import BuildTab
from tabs.program_tab import ProgramTab
from serial_605 import serial_605
import time
import sys
import json

class Ui(QMainWindow):
	def __init__(self):
		super(Ui, self).__init__() # Call the inherited classes __init__ method
		uic.loadUi('ui/main.ui', self) # Load the .ui file
		self.show() # Show the GUI
		self.shell = serial_605()
		# while not self.detect_and_connect_605():
		# 	pass

		self.details_tab = DetailsTab()
		self.details_tab.serial_comboBox.currentTextChanged.connect(self.serial_selected)

		self.tabWidget.addTab(self.details_tab, "Cable Details")
		self.show() # Show the GUI

	def detect_and_connect_605(self):
		ports = self.shell.find_devices()

		if len(ports) == 0:
			QMessageBox.critical(self, "No devices found", "Need a least one device plugged in")
			return False

		for port in ports:
			if self.shell.get_port_name() == None:
				self.shell.set_port(port)
				if self.shell.is_605_shell():
					break
				self.shell.set_port(None)

		if self.shell.get_port_name() == None:
			QMessageBox.critical(self, "Connection Failure", "Failed to find 605. May need to wait a couple of seconds if device was just powered on.")
			return False
		
		return True

	def serial_selected(self, serial_num):
		if serial_num != "":
			with open(self.details_tab.json_dir) as f:
				cable_obj = json.load(f)

			if isinstance(cable_obj, list):
				for cable in cable_obj:
					if int(serial_num) in cable["serial"]:
						if not any(x in self.details_tab.current_ids for x in cable["serial"]):
							self.details_tab.parse_cable_obj(cable)
						else:
							print("Cable already generated")
			else: # if single cable build found
				self.details_tab.parse_cable_obj(cable_obj)

		# all tab info is generated based from the current_cable file generated by the details tab
		if self.tabWidget.count() > 1:
			for i in range(self.tabWidget.count(), 0, -1):
				self.tabWidget.removeTab(i)

		self.tabWidget.addTab(ScanTab(self.shell ), "Scan and Sort")
		self.tabWidget.addTab(BuildTab(), "Build")
		self.tabWidget.addTab(ProgramTab(), "Program")

if __name__ == "__main__":
	app = QtWidgets.QApplication(sys.argv)
	window = Ui()
	app.exec_()